"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[489],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1397:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={title:"Apple-ID fixing"},p=void 0,s={unversionedId:"guide-Apple-ID",id:"guide-Apple-ID",title:"Apple-ID fixing",description:"Prerequisites (these are installed on the VM):",source:"@site/docs/guide-Apple-ID.md",sourceDirName:".",slug:"/guide-Apple-ID",permalink:"/docs/guide-Apple-ID",draft:!1,editUrl:"https://github.com/notAperson535/OneClick-macOS-Simple-KVM/tree/docs/docs/guide-Apple-ID.md",tags:[],version:"current",frontMatter:{title:"Apple-ID fixing"},sidebar:"docs",previous:{title:"How to increase disk size",permalink:"/docs/guide-disk-resizing"},next:{title:"Passing through a USB device",permalink:"/docs/guide-usb-passthrough"}},u={},m=[{value:"Prerequisites (these are installed on the VM):",id:"prerequisites-these-are-installed-on-the-vm",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"prerequisites-these-are-installed-on-the-vm"},"Prerequisites (these are installed on the VM):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/corpnewt/GenSMBIOS"},"GenSMBIOS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/corpnewt/ProperTree"},"ProperTree"))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Modify the MAC address. You can use a random unicast ",(0,i.kt)("a",{parentName:"p",href:"https://www.hellion.org.uk/cgi-bin/randmac.pl"},"MAC address generator"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"With the ",(0,i.kt)("inlineCode",{parentName:"li"},"basic.sh"),' script, just edit the script and modify the MAC address (search for "mac=")'),(0,i.kt)("li",{parentName:"ul"},"With virt-manager, paste it into the template generated by ",(0,i.kt)("inlineCode",{parentName:"li"},"make.sh"),". While I was editing the template, I also used ",(0,i.kt)("inlineCode",{parentName:"li"},"uuidgen")," and pasted that in there for good measure. Then import the template with ",(0,i.kt)("inlineCode",{parentName:"li"},"virsh define whatever.xml")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In the macOS Finder, look for ",(0,i.kt)("strong",{parentName:"p"},"EFI")," in the left bar under ",(0,i.kt)("strong",{parentName:"p"},"Volumes"),". If it isn't visible you will have to mount it:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Open the macOS Terminal and type ",(0,i.kt)("inlineCode",{parentName:"li"},"diskutil list")," and look for the disk/partition location of the EFI. (There may be more than one)"),(0,i.kt)("li",{parentName:"ul"},"Type ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo diskutil mount diskYsZ"),", using the disk/partition location name where you see EFI. It should look like this:\n",(0,i.kt)("img",{parentName:"li",src:"https://oneclick-macos-simple-kvm.notaperson535.is-a.dev/img/efi%20partition.png",alt:"image"}))))),(0,i.kt)("p",null,"For the next steps there is a ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=vBRrCYZEjtI"},"video guide here")," (timestamp 1:00 - 3:35, use SMBIOS iMacPro1,1)."),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"genSMBIOS.command"),' and generate a set of serials (option 3) for the mac model shown under "System Report" (should be iMacPro1,1).'),(0,i.kt)("li",{parentName:"ol"},"Locate the plist file at ",(0,i.kt)("inlineCode",{parentName:"li"},"/Volumes/EFI/OC/config.plist"),". Insert the generated serials into generic section in the appropriate places. The options for the ",(0,i.kt)("inlineCode",{parentName:"li"},"config.plist")," should be under ",(0,i.kt)("inlineCode",{parentName:"li"},"PlatformInfo > Generic")," in ProperTree.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"GenSMBIOS Value"),(0,i.kt)("th",{parentName:"tr",align:null},"config.plist"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Type"),(0,i.kt)("td",{parentName:"tr",align:null},"SystemProductName")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Serial"),(0,i.kt)("td",{parentName:"tr",align:null},"SystemSerialNumber")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Board Serial"),(0,i.kt)("td",{parentName:"tr",align:null},"MLB")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SmUUID"),(0,i.kt)("td",{parentName:"tr",align:null},"SystemUUID")))),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Sequoia only"),': In this version, it seems macOS detects the VM and "blocks" the apple ID. To trick macOS the default opencore config disables the flag "hv_vmm_present".',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Due to this, make sure the flag ",(0,i.kt)("inlineCode",{parentName:"li"},"hv_vmm_present")," set to 0 by runnning the command ",(0,i.kt)("inlineCode",{parentName:"li"},"sysctl kern | grep 'kern.hv_vmm_present'"),". If it is not, try ",(0,i.kt)("a",{parentName:"li",href:"/docs/start-here#important"},"updating your local repo"),", and if this still does not work, open an issue or join the ",(0,i.kt)("a",{parentName:"li",href:"https://discord.gg/XaEdCSPyNa"},"discord server"),"."))),(0,i.kt)("li",{parentName:"ol"},"Reboot."),(0,i.kt)("li",{parentName:"ol"},"You should be able to log in with your Apple ID now.")))}d.isMDXComponent=!0}}]);